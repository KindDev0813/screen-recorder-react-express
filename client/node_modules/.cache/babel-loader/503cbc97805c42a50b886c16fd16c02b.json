{"ast":null,"code":"var _jsxFileName = \"/home/benjamin/Documents/workstation/screen-recorder-app/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport Loader from 'react-loader-spinner';\nimport { io } from 'socket.io-client';\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SERVER_URI = 'http://localhost:4000';\nlet mediaRecorder = null;\nlet dataChunks = [];\n\nfunction App() {\n  _s();\n\n  const username = useRef(`User_${Date.now().toString().slice(-4)}`);\n  const socketRef = useRef(io(SERVER_URI));\n  const videoRef = useRef();\n  const linkRef = useRef();\n  const [screenStream, setScreenStream] = useState();\n  const [voiceStream, setVoiceStream] = useState();\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    socketRef.current.emit('user:connect', username.current);\n  }, []);\n  useEffect(() => {\n    ;\n\n    (async () => {\n      if (navigator.mediaDevices.getDisplayMedia) {\n        try {\n          const _screenStream = await navigator.mediaDevices.getDisplayMedia({\n            video: true\n          });\n\n          setScreenStream(_screenStream);\n        } catch (e) {\n          console.error('*** getDisplayMedia', e);\n          setLoading(false);\n        }\n      } else {\n        console.warn('*** getDisplayMedia not supported');\n        setLoading(false);\n      }\n    })();\n  }, []);\n  useEffect(() => {\n    ;\n\n    (async () => {\n      if (navigator.mediaDevices.getUserMedia) {\n        if (screenStream) {\n          try {\n            const _voiceStream = await navigator.mediaDevices.getUserMedia({\n              audio: true\n            });\n\n            setVoiceStream(_voiceStream);\n          } catch (e) {\n            console.error('*** getUserMedia', e);\n            setVoiceStream('unavailable');\n          } finally {\n            setLoading(false);\n          }\n        }\n      } else {\n        console.warn('*** getUserMedia not supported');\n        setLoading(false);\n      }\n    })();\n  }, [screenStream]);\n\n  function startRecording() {\n    if (screenStream && voiceStream && !mediaRecorder) {\n      setRecording(true);\n      videoRef.current.removeAttribute('src');\n      linkRef.current.removeAttribute('href');\n      linkRef.current.removeAttribute('download');\n      let mediaStream;\n\n      if (voiceStream === 'unavailable') {\n        mediaStream = screenStream;\n      } else {\n        // const audioTracks = voiceStream.getAudioTracks()\n        // audioTracks.forEach(track => {\n        //   screenStream.addTrack(track)\n        // })\n        // mediaStream = screenStream\n        mediaStream = new MediaStream([...screenStream.getVideoTracks(), ...voiceStream.getAudioTracks()]);\n      }\n\n      mediaRecorder = new MediaRecorder(mediaStream);\n\n      mediaRecorder.ondataavailable = _ref => {\n        let {\n          data\n        } = _ref;\n        dataChunks.push(data);\n        socketRef.current.emit('screenData:start', {\n          username: username.current,\n          data\n        });\n      };\n\n      mediaRecorder.onstop = stopRecording;\n      mediaRecorder.start(250);\n    }\n  }\n\n  function stopRecording() {\n    setRecording(false);\n    socketRef.current.emit('screenData:end', username.current);\n    const videoBlob = new Blob(dataChunks, {\n      type: 'video/webm'\n    });\n    const videoSrc = URL.createObjectURL(videoBlob);\n    videoRef.current.src = videoSrc;\n    linkRef.current.href = videoSrc;\n    linkRef.current.download = `${Date.now()}-${username.current}.webm`;\n    mediaRecorder = null;\n    dataChunks = [];\n  }\n\n  const onClick = () => {\n    if (!recording) {\n      startRecording();\n    } else {\n      if (mediaRecorder) {\n        mediaRecorder.stop();\n      }\n    }\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Loader, {\n    type: \"Oval\",\n    width: \"60\",\n    color: \"#0275d8\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Screen Recording App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      controls: true,\n      ref: videoRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      ref: linkRef,\n      children: \"Download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      disabled: !voiceStream,\n      children: !recording ? 'Start' : 'Stop'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"d2yC9vJktxtVah4Tf5ewiupv/Ec=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/benjamin/Documents/workstation/screen-recorder-app/client/src/App.js"],"names":["useEffect","useRef","useState","Loader","io","SERVER_URI","mediaRecorder","dataChunks","App","username","Date","now","toString","slice","socketRef","videoRef","linkRef","screenStream","setScreenStream","voiceStream","setVoiceStream","recording","setRecording","loading","setLoading","current","emit","navigator","mediaDevices","getDisplayMedia","_screenStream","video","e","console","error","warn","getUserMedia","_voiceStream","audio","startRecording","removeAttribute","mediaStream","MediaStream","getVideoTracks","getAudioTracks","MediaRecorder","ondataavailable","data","push","onstop","stopRecording","start","videoBlob","Blob","type","videoSrc","URL","createObjectURL","src","href","download","onClick","stop"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from 'react'\nimport Loader from 'react-loader-spinner'\nimport { io } from 'socket.io-client'\nimport './App.scss'\n\nconst SERVER_URI = 'http://localhost:4000'\n\nlet mediaRecorder = null\nlet dataChunks = []\n\nfunction App() {\n  const username = useRef(`User_${Date.now().toString().slice(-4)}`)\n  const socketRef = useRef(io(SERVER_URI))\n  const videoRef = useRef()\n  const linkRef = useRef()\n\n  const [screenStream, setScreenStream] = useState()\n  const [voiceStream, setVoiceStream] = useState()\n  const [recording, setRecording] = useState(false)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    socketRef.current.emit('user:connect', username.current)\n  }, [])\n\n  useEffect(() => {\n    ;(async () => {\n      if (navigator.mediaDevices.getDisplayMedia) {\n        try {\n          const _screenStream = await navigator.mediaDevices.getDisplayMedia({\n            video: true\n          })\n          setScreenStream(_screenStream)\n        } catch (e) {\n          console.error('*** getDisplayMedia', e)\n          setLoading(false)\n        }\n      } else {\n        console.warn('*** getDisplayMedia not supported')\n        setLoading(false)\n      }\n    })()\n  }, [])\n\n  useEffect(() => {\n    ;(async () => {\n      if (navigator.mediaDevices.getUserMedia) {\n        if (screenStream) {\n          try {\n            const _voiceStream = await navigator.mediaDevices.getUserMedia({\n              audio: true\n            })\n            setVoiceStream(_voiceStream)\n          } catch (e) {\n            console.error('*** getUserMedia', e)\n            setVoiceStream('unavailable')\n          } finally {\n            setLoading(false)\n          }\n        }\n      } else {\n        console.warn('*** getUserMedia not supported')\n        setLoading(false)\n      }\n    })()\n  }, [screenStream])\n\n  function startRecording() {\n    if (screenStream && voiceStream && !mediaRecorder) {\n      setRecording(true)\n\n      videoRef.current.removeAttribute('src')\n      linkRef.current.removeAttribute('href')\n      linkRef.current.removeAttribute('download')\n\n      let mediaStream\n      if (voiceStream === 'unavailable') {\n        mediaStream = screenStream\n      } else {\n        // const audioTracks = voiceStream.getAudioTracks()\n        // audioTracks.forEach(track => {\n        //   screenStream.addTrack(track)\n        // })\n        // mediaStream = screenStream\n        mediaStream = new MediaStream([\n          ...screenStream.getVideoTracks(),\n          ...voiceStream.getAudioTracks()\n        ])\n      }\n\n      mediaRecorder = new MediaRecorder(mediaStream)\n      mediaRecorder.ondataavailable = ({ data }) => {\n        dataChunks.push(data)\n        socketRef.current.emit('screenData:start', {\n          username: username.current,\n          data\n        })\n      }\n      mediaRecorder.onstop = stopRecording\n      mediaRecorder.start(250)\n    }\n  }\n\n  function stopRecording() {\n    setRecording(false)\n\n    socketRef.current.emit('screenData:end', username.current)\n\n    const videoBlob = new Blob(dataChunks, {\n      type: 'video/webm'\n    })\n\n    const videoSrc = URL.createObjectURL(videoBlob)\n\n    videoRef.current.src = videoSrc\n    linkRef.current.href = videoSrc\n    linkRef.current.download = `${Date.now()}-${username.current}.webm`\n\n    mediaRecorder = null\n    dataChunks = []\n  }\n\n  const onClick = () => {\n    if (!recording) {\n      startRecording()\n    } else {\n      if (mediaRecorder) {\n        mediaRecorder.stop()\n      }\n    }\n  }\n\n  if (loading) return <Loader type='Oval' width='60' color='#0275d8' />\n\n  return (\n    <>\n      <h1>Screen Recording App</h1>\n      <video controls ref={videoRef}></video>\n      <a ref={linkRef}>Download</a>\n      <button onClick={onClick} disabled={!voiceStream}>\n        {!recording ? 'Start' : 'Stop'}\n      </button>\n    </>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}